@page "/explore"

@using Ankh.Data
@inject Repository<RoomData> _roomRepository

<div class="container">
    @foreach (var room in Current.Items) {
        <RoomDisplay Room=@room></RoomDisplay>
    }

    <div class="container m-5 p-5">
        <nav class="pagination is-centered" role="navigation" aria-label="pagination">
            <NavLink @onclick="PrevPageAsync" class="pagination-previous">Previous</NavLink>
            <NavLink @onclick="NextPageAsync" class="pagination-next">Next page</NavLink>
            <ul class="pagination-list">
                @foreach (var (number, _) in NavPages) {
                    <NavLink @onclick="() => GetPageAsync(number)" class="pagination-link">@number </NavLink>
                }
                <li>
                    <span class="pagination-ellipsis">&hellip;</span>
                </li>
                <NavLink @onclick="() => GetPageAsync(Pages.Count - 1)" class="pagination-link">@(Pages.Count - 1)</NavLink>
            </ul>
        </nav>
    </div>
</div>

@code {

    public record struct Page<T>(int Number, IReadOnlyList<T> Items);

    private Page<RoomData> Current { get; set; }
    private IList<Page<RoomData>> Pages { get; set; }
    private IEnumerable<Page<RoomData>> NavPages;

    protected override async Task OnInitializedAsync() {
        var chunks = (await _roomRepository.GetAllAsync()).Chunk(10).ToList();
        var pages = new List<Page<RoomData>>();
        for (var i = 1; i < chunks.Count; i++) {
            pages.Add(new Page<RoomData>(i, chunks[i]));
        }

        Pages = pages;
        Current = pages[0];
        NavPages = pages.GetRange(Current.Number, 5);
        await base.OnInitializedAsync();
    }

    public async Task NextPageAsync() {
        Current = Pages[Current.Number + 1];
        await InvokeAsync(StateHasChanged);
    }

    public async Task PrevPageAsync() {
        Current = Pages[Current.Number - 1];
        await InvokeAsync(StateHasChanged);
    }

    public async Task GetPageAsync(int pageNumber) {
        Current = Pages[pageNumber];
        await InvokeAsync(StateHasChanged);
    }

}