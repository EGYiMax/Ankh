@page "/explore"

@using Ankh.Data
@inject Database _database


@if (Current == default)
{
    <div class="alert alert-warning">
        <div class="flex-1">
            <label>⚠️ Loading rooms!</label>
        </div>
    </div>
}
else
{
    @foreach (var room in Current.Items)
    {
        <RoomDisplay Room=@room></RoomDisplay>
    }

    <div class="flex flex-1 justify-center bg-accent p-2 rounded-box">
        <div class="items-stretch hidden lg:flex gap-x-3">
            <NavLink @onclick="PrevPageAsync" class="btn btn-outline btn-wide flex items-center">Previous</NavLink>
            <NavLink @onclick="PrevPageAsync" class="btn btn-outline">1</NavLink>
            <NavLink @onclick="PrevPageAsync" class="btn btn-outline">1</NavLink>
            <NavLink @onclick="NextPageAsync" class="btn btn-outline btn-wide">Next page</NavLink>
        </div>
    </div>
}



@code {

    public record struct Page<T>(int Number, IReadOnlyList<T> Items);

    private Page<RoomData> Current { get; set; }
    private IList<Page<RoomData>> Pages { get; set; }
    private IEnumerable<Page<RoomData>> _navPages;

    protected override async Task OnInitializedAsync()
    {
        var chunks = (await _database.GetAsync<RoomData>()).Chunk(10).ToList();
        var pages = new List<Page<RoomData>>();
        for (var i = 1; i < chunks.Count; i++)
        {
            pages.Add(new Page<RoomData>(i, chunks[i]));
        }

        Pages = pages;
        Current = pages[0];
        _navPages = pages.GetRange(Current.Number, 5);
        await base.OnInitializedAsync();
    }

    public async Task NextPageAsync()
    {
        Current = Pages[Current.Number];
        await InvokeAsync(StateHasChanged);
    }

    public async Task PrevPageAsync()
    {
        var previous = Current.Number - 1;
        Current = Pages.ElementAt(previous);
        await InvokeAsync(StateHasChanged);
    }

    public async Task GetPageAsync(int pageNumber)
    {
        Current = Pages[pageNumber];
        await InvokeAsync(StateHasChanged);
    }

}