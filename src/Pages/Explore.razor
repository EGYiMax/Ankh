@page "/explore"

@using Ankh.Data
@inject Database _database


<div class="container mx-auto">
    @if (Current == default) {
        <div class="alert alert-warning">
            <div class="flex-1">
                <label>⚠️ Loading rooms!</label>
            </div>
        </div>
    }
    else {
        @foreach (var room in Current.Items) {
            <RoomDisplay Room=@room></RoomDisplay>
        }

        <div class="flex flex-1 w-full lg:flex-row justify-center bg-accent rounded-box">
            <div class="items-stretch flex py-3 m-3 lg:gap-2">
                <NavLink @onclick="PrevPageAsync" class="btn btn-outline">⬅️</NavLink>
                @foreach (var nav in _navPages) {
                    <NavLink @onclick="() => GetPageAsync(nav.Number)" class="btn btn-outline">@nav.Number</NavLink>
                }
                <NavLink @onclick="NextPageAsync" class="btn btn-outline">➡️</NavLink>
            </div>
        </div>
    }
</div>

@code {

    public record struct Page<T>(int Number, IReadOnlyList<T> Items);

    private Page<RoomData> Current { get; set; }
    private List<Page<RoomData>> Pages { get; set; }
    private IEnumerable<Page<RoomData>> _navPages;

    protected override async Task OnInitializedAsync() {
        var chunks = (await _database.GetAsync<RoomData>())
            .OrderBy(x => x.Name)
            .Chunk(10)
            .ToList();
        var pages = new List<Page<RoomData>>();
        for (var i = 1; i < chunks.Count; i++) {
            pages.Add(new Page<RoomData>(i, chunks[i]));
        }

        Pages = pages;
        Current = pages[0];
        _navPages = pages.GetRange(Current.Number - 1, 5);
        await base.OnInitializedAsync();
    }

    public async Task NextPageAsync() {
        Current = Pages[Current.Number];
        await InvokeAsync(StateHasChanged);
    }

    public async Task PrevPageAsync() {
        if ((Current.Number - 2) < 0) {
            return;
        }

        Current = Pages[Current.Number - 2];
        await InvokeAsync(StateHasChanged);
    }

    public async Task GetPageAsync(int pageNumber) {
        Current = Pages[pageNumber];
        _navPages = Pages.GetRange(Current.Number - 1, 5);
        await InvokeAsync(StateHasChanged);
    }

}